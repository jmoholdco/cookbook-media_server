
# Sample configuration file for NZBGet
#
# On POSIX put this file to one of the following locations:
# ~/.nzbget
# /etc/nzbget.conf
# /usr/etc/nzbget.conf
# /usr/local/etc/nzbget.conf
# /opt/etc/nzbget.conf
#
# On Windows put this file in program's directory.
#
# You can also put the file into any location, if you specify the path to it
# using switch "-c", e.g:
#   nzbget -c /home/user/myconfig.txt

# For quick start change the option MainDir and configure one news-server


##############################################################################
### PATHS                                                                  ###
MainDir=/mnt/media/downloads
DestDir=${MainDir}/dst
InterDir=${MainDir}/inter
NzbDir=${MainDir}/nzb
QueueDir=${MainDir}/queue
TempDir=${MainDir}/tmp
WebDir=/usr/local/share/nzbget/webui
ScriptDir=${MainDir}/scripts
LockFile=${MainDir}/nzbget.lock
LogFile=/var/log/nzbget.log
ConfigTemplate=/usr/local/share/nzbget/nzbget.conf
RequiredDir=

##############################################################################
### NEWS-SERVERS                                                           ###

Server1.Active=yes
Server1.Name=
Server1.Level=0
Server1.Group=0
Server1.Host=news.newshosting.com
Server1.Port=443
Server1.Username=baberthal
Server1.Password=sWxf5ECC
Server1.JoinGroup=no
Server1.Encryption=yes
Server1.Cipher=
Server1.Connections=60
Server1.Retention=0

##############################################################################
### SECURITY                                                               ###

ControlIP=0.0.0.0
ControlPort=6789
ControlUsername=nzbget
ControlPassword=tegbzn6789

RestrictedUsername=
RestrictedPassword=
AddUsername=
AddPassword=
SecureControl=no
SecurePort=6791
SecureCert=
SecureKey=
AuthorizedIP=
DaemonUsername=nzbget
UMask=1000

##############################################################################
### CATEGORIES                                                             ###
Category1.Name=Movies
Category1.DestDir=
Category1.Unpack=yes
Category1.PostScript=
Category1.Aliases=

Category2.Name=Series
Category3.Name=Music
Category4.Name=Software

##############################################################################
### RSS FEEDS                                                              ###

# Name of RSS Feed.
#
# The name is used in UI and for logging. It can be any string.
#Feed1.Name=my feed

# Address (URL) of RSS Feed.
#
# Example: https://myindexer.com/api?apikey=3544646bfd1c535a9654645609800901&t=search&q=game.
#Feed1.URL=

# Filter rules for items.
#
# Use filter to ignore unwanted items in the feed. In its simplest version
# the filter is a space separated list of words which must be present in
# the item title.
#
# Example: linux debian dvd.
#
# MORE INFO:
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/RSS.
#
# Feed filter consists of rules - one rule per line. Each rule defines
# a search string and a command, which must be performed if the search
# string matches. There are five kinds of rule-commands: Accept,
# Reject, Require, Options, Comment.
#
# NOTE: Since options in the configuration file can not span multiple
# lines, the lines (rules) must be separated with %-character (percent).
#
# Definition of a rule:
#  [A:|A(options):|R:|Q:|O(options):|#] search-string
#
#  A - declares Accept-rule. Rules are accept-rules by default, the
#      "A:" can be imitted. If the feed item matches to the rule the
#      item is considered good and no further rules are checked.
#  R - declares Reject-rule. If the feed item matches to the rule the
#      item is considered bad and no further rules are checked.
#  Q - declares Require-rule. If the feed item DOES NOT match to the rule
#      the item is considered bad and no further rules are checked.
#  O - declares Options-rule. If the feed item matches to the rule the
#      options declared in the rule are set for the item. The item is
#      neither accepted nor rejected via this rule but can be accepted
#      later by one of Accept-rules. In this case the item will have its
#      options already set (unless the Accept-rule overrides them).
#  # - lines starting with # are considered comments and are ignored. You
#      can use comments to explain complex rules or to temporary disable
#      rules for debugging.
#
# Options allow to set properties on nzb-file. It's a comma-separated
# list of property names with their values.
#
# Definition of an option:
#  name:value
#
# Options can be defined using long option names or short names:
#  category (cat, c)    - set category name, value is a string;
#  pause (p)            - add nzb in paused or unpaused state, possible
#                         values are: yes (y), no (n);
#  priority (pr, r)     - set priority, value is a signed integer number;
#  priority+ (pr+, r+)  - increase priority, value is a signed integer number;
#  dupescore (ds, s)    - set duplicate score, value is a signed integer number;
#  dupescore+ (ds+, s+) - increase duplicate score, value is a signed integer number;
#  dupekey (dk, k)      - set duplicate key, value is a string;
#  dupekey+ (dk+, k+)   - add to duplicate key, value is a string;
#  dupemode (dm, m)     - set duplicate check mode, possible values
#                         are: score (s), all (a), force (f);
#  rageid				- generate duplicate key using this rageid
#                         (integer number) and season/episode numbers;
#  series				- generate duplicate key using series identifier
#                         (any unique string) and season/episode numbers.
#
# Examples of option definitions:
#  Accept(category:my series, pause:yes, priority:100): my show 1080p;
#  Options(c:my series, p:y, r:100): 1080p;
#  Options(s:1000): 1080p;
#  Options(k+:1080p): 1080p;
#  Options(dupemode:force): BluRay.
#
# Rule-options override values set in feed-options.
#
# The search-string is similar to used in search engines. It consists of
# search terms separated with spaces. Every term is checked for a feed
# item and if they all succeed the rule is considered matching.
#
# Definition of a term:
#  [+|-][field:][command]param
#
#  +       - declares a positive term. Terms are positive by default,
#            the "+" can be omitted;
#  -       - declares a negative term. If the term succeed the feed
#            item is ignored;
#  field   - field to which apply the term. If not specified
#            the default field "title" is used;
#  command - a special character defining how to interpret the
#            parameter (followed after the command):
#            @  - search for string "param". This is default command,
#                 the "@" can be omitted;
#            $  - "param" defines a regular expression (using POSIX Extended
#                 Regular Expressions syntax);
#            =  - equal;
#            <  - less than;
#            <= - equal or less than;
#            >  - greater than;
#            >= - equal or greater than;
#  param   - parameter for command.
#
# Commands @ and $ are for use with text fields (title, filename, category,
# link, description, dupekey). Commands =, <, <=, > and >= are for use
# with numeric fields (size, age, imdbid, rageid, season, episode, priority,
# dupescore).
#
# Only fields title, filename and age are always present. The availability of
# other fields depend on rss feed provider.
#
# Any newznab attribute (encoded as "newznab:attr" in the RSS feed) can
# be used as search field with prefix "attr-", for example "attr-genre".
#
# Text search (Command @) supports supports wildcard characters * (matches
# any number of any characters), ? (matches any one character)
# and # (matches one digit).
# Text search is by default performed against words (word-search mode): the
# field content is separated into words and then each word is checked
# against pattern. If the search pattern starts and ends with * (star)
# the search is performed against the whole field content
# (substring-search mode). If the search pattern contains word separator
# characters (except * and ?) the search is performed on the whole
# field (the word-search would be obviously never successful in this
# case). Word separators are: !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~.
#
# Field "size" can have suffixes "K" or "KB" for kilobytes, "M" or "MB"
# for megabytes and "G" or "GB" for gigabytes. Field "age" can have
# suffixes "m" for minutes, "h" for hours and "d" for days. If suffix
# is not specified default is days.
#
# Examples (the trailing ; or . is not part of filter):
# 1) A: s01* -category:anime;
# 2) my show WEB-DL;
# 3) *my?show* WEB-DL size:<1.8GB age:>2h;
# 4) R: size:>9GB;
# 5) Q: HDTV.
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/RSS.
#Feed1.Filter=

# Treat all items on first fetch as backlog (yes, no).
#
#  yes - when the feed is fetched for the very first time (or after
#        changing of URL or filter) all existing items are ignored (marked
#        as backlog). The items found on subsequentional fetches are processed;
#  no  - all items are processed even on first fetch (or after
#        changing of URL or filter).
#Feed1.Backlog=yes

# How often to check for new items (minutes).
#
# Value "0" disables the automatic check of this feed.
#Feed1.Interval=15

# Add nzb-files as paused (yes, no).
#Feed1.PauseNzb=no

# Category for added nzb-files.
#
# NOTE: Feed providers may include category name within response when nzb-file
# is downloaded. If you want to use the providers category leave the option empty.
#Feed1.Category=

# Priority for added nzb-files (number).
#
# Priority can be any integer value. The web-interface however operates
# with only six predefined priorities: -100 (very low priority), -50
# (low priority), 0 (normal priority, default), 50 (high priority),
# 100 (very high priority) and 900 (force priority). Downloads with
# priorities equal to or greater than 900 are downloaded and
# post-processed even if the program is in paused state (force mode).
#Feed1.Priority=0

# List of rss feed scripts to execute before rss feed content is processed.
#
# For more information see global option <FeedScript>.
#Feed1.FeedScript=

##############################################################################
### INCOMING NZBS                                                          ###

# Create subdirectory with category-name in destination-directory (yes, no).
AppendCategoryDir=yes
NzbDirInterval=5
NzbDirFileAge=60
DupeCheck=yes

##############################################################################
### DOWNLOAD QUEUE                                                         ###

SaveQueue=yes
FlushQueue=yes
ReloadQueue=yes
ContinuePartial=yes
PropagationDelay=0
Decode=yes
ArticleCache=0
DirectWrite=yes
WriteBuffer=0
CrcCheck=yes
Retries=3
RetryInterval=10
ArticleTimeout=60
UrlTimeout=60
TerminateTimeout=600
DownloadRate=0
AccurateRate=no
DiskSpace=250
DeleteCleanupDisk=yes
NzbCleanupDisk=yes
KeepHistory=30
FeedHistory=7
UrlConnections=4
UrlForce=yes

##############################################################################
### LOGGING                                                                ###

WriteLog=append
RotateLog=3
ErrorTarget=both
WarningTarget=both
InfoTarget=both
DetailTarget=log
DebugTarget=log
LogBufferSize=1000
NzbLog=yes
BrokenLog=yes

DumpCore=no
TimeCorrection=0

##############################################################################
### DISPLAY (TERMINAL)                                                     ###

# Set screen-outputmode (loggable, colored, curses).
#
# loggable - only messages will be printed to standard output;
# colored  - prints messages (with simple coloring for messages categories)
#            and download progress info; uses escape-sequences to move cursor;
# curses   - advanced interactive interface with the ability to edit
#            download queue and various output option.
OutputMode=curses

# Shows NZB-Filename in file list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with Z-key.
CursesNzbName=yes

# Show files in groups (NZB-files) in queue list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with G-key.
CursesGroup=no

# Show timestamps in message list in curses-outputmode (yes, no).
#
# This option controls the initial state of curses-frontend,
# it can be switched on/off in run-time with T-key.
CursesTime=no

# Update interval for Frontend-output in console mode or remote client
# mode (milliseconds).
#
# Min value 25. Bigger values reduce CPU usage (especially in curses-outputmode)
# and network traffic in remote-client mode.
UpdateInterval=200


##############################################################################
### SCHEDULER                                                              ###

# Time to execute the command (HH:MM).
#
# Multiple comma-separated values are accepted.
# Asterix as hours-part means "every hour".
#
# Examples: "08:00", "00:00,06:00,12:00,18:00", "*:00", "*:00,*:30".
#
# NOTE: Also see option <TimeCorrection>.
#Task1.Time=08:00

# Week days to execute the command (1-7).
#
# Comma separated list of week days numbers.
# 1 is Monday.
# Character '-' may be used to define ranges.
#
# Examples: "1-7", "1-5", "5,6", "1-5, 7".
#Task1.WeekDays=1-7

# Command to be executed (PauseDownload, UnpauseDownload, PausePostProcess,
# UnpausePostProcess, PauseScan, UnpauseScan, DownloadRate, Script, Process,
# ActivateServer, DeactivateServer, FetchFeed).
#
# Possible commands:
#   PauseDownload      - pause download;
#   UnpauseDownload    - resume download;
#   PausePostProcess   - pause post-processing;
#   UnpausePostProcess - resume post-processing;
#   PauseScan          - pause scan of incoming nzb-directory;
#   UnpauseScan        - resume scan of incoming nzb-directory;
#   DownloadRate       - set download rate limit;
#   Script             - execute one or multiple scheduler scripts. The scripts
#                        must be written specially for NZBGet;
#   Process            - execute an external (any) program;
#   ActivateServer     - activate news-server;
#   DeactivateServer   - deactivate news-server;
#   FetchFeed          - fetch RSS feed.
#
# On start the program checks all tasks and determines current state
# for download-pause, scan-pause, download-rate and active servers.
#Task1.Command=PauseDownload

# Parameters for the command if needed.
#
# Some scheduler commands require additional parameters:
#  DownloadRate     - download rate limit to be set (kilobytes/sec).
#                     Example: 1000;
#  Script           - list of scheduler scripts to execute. The scripts in
#                     the list must be separated with commas or semicolons. Only
#                     filenames without path must be used. All scripts must be
#                     stored in directory pointed by option <ScriptDir>. For
#                     more info see below;
#  Process          - path to the program to execute and its parameters.
#                     Example: /home/user/fetch.sh.
#                     If filename or any parameter contains spaces it
#                     must be surrounded with single quotation
#                     marks. If filename/parameter contains single quotation marks,
#                     each of them must be replaced with two single quotation
#                     marks and the resulting filename/parameter must be
#                     surrounded with single quotation marks.
#                     Example: '/home/user/download/my scripts/task process.sh' 'world''s fun'.
#                     In this example one parameter (world's fun) is passed
#                     to the script (task process.sh).
#  ActivateServer   - comma separated list of news server ids or server names.
#                     Example: 1,3.
#                     Example: my news server 1, my news server 2.
#                     NOTE: server names should not have commas.
#  DeactivateServer - see ActivateServer.
#  FetchFeed        - comma separated list of RSS feed ids or feed names.
#                     Example: 1,3.
#                     Example: bookmarks feed, another feed.
#                     NOTE: feed names should not have commas.
#                     NOTE: use feed id "0" to fetch all feeds.
#
# INFO FOR DEVELOPERS:
# The rest of the description is for command "Script".
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#
# NZBGet passes following arguments to scheduler script as environment
# variables:
#  NZBSP_TASKID    - id number of scheduler Task.
#
# In addition to these arguments NZBGet passes all nzbget.conf-options
# as environment variables. These variables have prefix "NZBOP_" and
# are written in UPPER CASE. For Example option "ParRepair" is passed as
# environment variable "NZBOP_PARREPAIR". The dots in option names are
# replaced with underscores, for example "SERVER1_HOST". For options
# with predefined possible values (yes/no, etc.) the values are passed
# always in lower case.
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#Task1.Param=

#Task2.Time=20:00
#Task2.WeekDays=1-7
#Task2.Command=UnpauseDownload
#Task2.Param=


##############################################################################
### PAR CHECK/REPAIR                                                       ###

# Whether and how par-verification must be performed (auto, always, force, manual).
#
#  Auto   - par-check is performed when needed. One par2-file is always
#           downloaded. Additional par2-files are downloaded if needed
#           for repair. Repair is performed if the option <ParRepair>
#           is enabled;
#  Always - check every download (even undamaged). One par2-file is
#           always downloaded. Additional par2-files are downloaded
#           if needed for repair.  Repair is performed if the option
#           <ParRepair> is enabled;
#  Force  - force par-check for every download (even undamaged). All
#           par2-files are always downloaded. Repair is performed if
#           the option <ParRepair> is enabled;
#  Manual - par-check is skipped. One par2-file is always
#           downloaded. If a damaged download is detected, all
#           par2-files are downloaded but neithet par-check nor par-repair
#           take place. The download can be then repaired manually,
#           eventually on another faster computer.
ParCheck=auto

# Check for renamed and missing files (yes, no).
#
# Par-rename restores original file names using information stored
# in par2-files. It also detects missing files (files listed in
# par2-files but not present on disk). When enabled the par-rename is
# performed as the first step of post-processing for every nzb-file.
#
# Par-rename is very fast and is highly recommended, especially if
# unpack is disabled.
ParRename=yes

# Automatic par-repair after par-verification (yes, no).
#
# If option <ParCheck> is set to "Auto" or "Force" this option defines
# if the download must be repaired when needed. The option can be
# disabled if computer does not have enough CPU power, since repairing
# may take too much resources and time on a slow computers.
ParRepair=yes

# What files should be scanned during par-verification (limited, extended,
# full, dupe).
#
#  Limited  - scan only files belonging to par-set;
#  Extended - scan files belonging to par-set first, scan other files until
#             all missing files are found;
#  Full     - scan all files in destination directory. Can be very time
#             consuming but may sometimes repair where Limited and Extended fail;
#  Dupe     - scan files belonging to par-set first, scan other files until
#             repair is possible. Even files from other duplicate-downloads
#             are scanned. Can be very time consuming but brings best results.
ParScan=extended

# Quick file verification during par-check (yes, no).
#
# If the option is active the files are quickly verified using
# checksums calculated during download; quick verification is very fast
# because it doesn't require the reading of files from disk, NZBGet
# knows checksums of downloaded files and quickly compares them with
# checksums stored in the par-file.
#
# If the option is disabled the files are verified as usual. That's
# slow. Use this if the quick verification doesn't work properly.
ParQuick=yes

# Memory limit for par-repair buffer (megabytes).
#
# Set the amount of RAM that the par-checker may use during repair. Having
# the buffer as big as the total size of all damaged blocks allows for
# the optimal repair speed. The option sets the maximum buffer size, the
# allocated buffer can be smaller.
#
# If you have a lot of RAM set the option to few hundreds (MB) for the
# best repair performance.
ParBuffer=16

# Number of threads to use during par-repair (0-99).
#
# On multi-core CPUs for the best speed set the option to the number of
# logical cores (physical cores + hyper-threading units). If you want
# to utilize the CPU to 100% you may need to add one or two additional threads
# to compensate for wait intervals used for thread synchronization.
#
# On single-core CPUs use only one thread.
#
# Set to '0' to automatically use all available CPU cores (may not
# work on old or exotic platforms).
ParThreads=0

# Files to ignore during par-check.
#
# List of file extensions, file names or file masks to ignore by
# par-rename and par-check. The entries must be separated with
# commas.
#
# The entries must be separated with commas. The entries can be file
# extensions, file names or file masks containing wildcard
# characters * and ?.
#
# If par-rename or par-check detect missing or damaged files they
# will ignore files matching this option and will not initiate
# repair. This avoids time costing repair for unimportant files.
#
# NOTE: Files matching the option <ExtCleanupDisk> are ignored as well.
#
# Example: .sfv, .nzb, .nfo
ParIgnoreExt=.sfv, .nzb, .nfo

# What to do if download health drops below critical health (delete,
# pause, none).
#
#  Delete - delete nzb-file from queue. If option <DeleteCleanupDisk>
#           is active the already downloaded files will be deleted too;
#  Pause  - pause nzb-file;
#  None   - do nothing (continue download).
#
# NOTE: For automatic duplicate handling option must be set to "Delete"
# or "None". If it is set to "Pause" you will need to manually return
# another duplicate to queue (if any exists in history). See also
# option <DupeCheck>.
#
# NOTE: When option <ParScan> is set to "Dupe" the delete-action is performed
# only if article completion is below 10% (empirical threshold). This is to
# improve efficiency of dupe par scan mode.
HealthCheck=delete

# Maximum allowed time for par-repair (minutes).
#
# If you use NZBGet on a very slow computer like NAS-device, it may be good to
# limit the time allowed for par-repair. NZBGet calculates the estimated time
# required for par-repair. If the estimated value exceeds the limit defined
# here, NZBGet cancels the repair.
#
# To avoid a false cancellation NZBGet compares the estimated time with
# <ParTimeLimit> after the first 5 minutes of repairing, when the calculated
# estimated time is more or less accurate. But in a case if <ParTimeLimit> is
# set to a value smaller than 5 minutes, the comparison is made after the first
# whole minute.
#
# Value "0" means unlimited.
#
# NOTE: The option limits only the time required for repairing. It doesn't
# affect the first stage of parcheck - verification of files. However the
# verification speed is constant, it doesn't depend on files integrity and
# therefore it is not necessary to limit the time needed for the first stage.
ParTimeLimit=0

# Pause download queue during check/repair (yes, no).
#
# Enable the option to give CPU more time for par-check/repair. That helps
# to speed up check/repair on slow CPUs with fast connection (e.g. NAS-devices).
#
# NOTE: If parchecker needs additional par-files it temporarily unpauses
# the queue.
#
# NOTE: See also options <ScriptPauseQueue> and <UnpackPauseQueue>.
ParPauseQueue=no

# Cleanup download queue after successful check/repair (yes, no).
#
# Enable this option for automatic deletion of unneeded (paused) par-files
# from download queue after successful check/repair.
ParCleanupQueue=yes


##############################################################################
### UNPACK                                                                 ###

# Unpack downloaded nzb-files (yes, no).
#
# Each download (nzb-file) has a post-processing parameter "Unpack". The option
# <Unpack> is the default value assigned to this pp-parameter of the download
# when it is added to queue.
#
# When nzb-file is added to queue it can have a category assigned to it. In this
# case the option <CategoryX.Unpack> overrides the global option <Unpack>.
#
# If the download is damaged and could not be repaired using par-files
# the unpacking is not performed.
#
# If the option <ParCheck> is set to "Auto" the program tries to unpack
# downloaded files first. If the unpacking fails the par-check/repair
# is performed and the unpack is executed again.
Unpack=yes

# Pause download queue during unpack (yes, no).
#
# Enable the option to give CPU more time for unpacking. That helps
# to speed up unpacking on slow CPUs.
#
# NOTE: See also options <ParPauseQueue> and <ScriptPauseQueue>.
UnpackPauseQueue=no

# Delete archive files after successful unpacking (yes, no).
UnpackCleanupDisk=yes

# Full path to unrar executable.
#
# Example: /usr/bin/unrar.
#
# The option can also contain extra switches to pass to unrar. To the
# here defined command line NZBGet adds the following switches:
#    x -y -p- -o+ *.rar ./_unpack/
#
# Switch "x" is added only if neither "x" nor "e" were defined in
# the option (this allows you to use switch "e" instead of "x"). switch
# "-o+" is added only if neither "-o+" nor "-o-" were defined
# in the command line. All other paramaters are always added. Parameter
# "-p-" is replaced with "-ppassword" if a password is set for nzb-file.
#
# Examples:
# 1) ignore file attributes (pemissions):
# /usr/bin/unrar x -ai;
# 2) decrease priority of unrar-process:
# nice -n 19 unrar.
#
# For other useful switches refer to unrar documentation.
#
# If unrar is in your PATH you may leave the path part and set only
# the executable name ("unrar" on POSIX or "unrar.exe" on Windows).
UnrarCmd=unrar

# Full path to 7-Zip executable.
#
# Example: /usr/bin/7z.
#
# Similar to option <UnrarCmd> this option can also include extra switches.
#
# If 7-Zip binary is in your PATH you may leave the path part and set only
# the executable name ("7z" or "7za" on POSIX or "7z.exe" on Windows).
SevenZipCmd=7z

# Files to delete after successful download.
#
# List of file extensions, file names or file masks to delete after
# successful download. If either unpack or par-check fail the cleanup is
# not performed. If neither unpack nor par-check were made (because they
# were disabled or the download doesn't contain archives and/or par-files
# the cleanup is performed if the health is 100%.
#
# The entries must be separated with commas. The entries can be file
# extensions, file names or file masks containing wildcard
# characters * and ?.
#
# Files listed here are also ignored by par-rename and par-check.
#
# NOTE: See also option <ParIgnoreExt>.
#
# Example: .par2, .sfv
ExtCleanupDisk=.par2, .sfv, _brokenlog.txt

# Path to file containing unpack passwords.
#
# If the option is set the program will try all passwords from the file
# when unpacking the archives. The file must be a text file containing
# one password per line.
#
# If an nzb-file has a defined password (in the post-processing settings)
# then the password-file is not used for that nzb-file.
#
# NOTE: Trying multiple passwords is a time consuming task. Whenever possible
# passwords should be set per nzb-file in their post-processing settings.
UnpackPassFile=

##############################################################################
### EXTENSION SCRIPTS                                                      ###

# Default list of post-processing scripts to execute after the download
# of nzb-file is completed and possibly par-checked/repaired and unpacked.
#
# The scripts in the list must be separated with commas or semicolons. Only
# filenames without path must be used. All scripts must be stored in directory
# pointed by option <ScriptDir>.
#
# Example: Cleanup.sh, Move.sh, EMail.py.
#
# Each download (nzb-file) has its own list of post-processing scripts. The option
# <PostScript> is the default value assigned to download when it is added to
# queue. The list of post-processing scripts for a particular download can be
# changed in the edit dialog in web-interface or using remote command "--edit/-E".
#
# When nzb-file is added to queue it can have a category assigned to it. In this
# case the option <CategoryX.PostScript> (if not empty) overrides the
# global option <PostScript>.
#
# NOTE: The script execution order is controlled by option <ScriptOrder>, not
# by their order in option <PostScript>.
#
# NOTE: Changing options <PostScript> and <CategoryX.PostScript> doesn't affect
# already queued downloads.
#
# NOTE: For the list of interesting post-processing scripts see
# http://nzbget.net/Catalog_of_post-processing_scripts.
#
# INFO FOR DEVELOPERS:
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#
# NZBGet passes following arguments to post-processing script as environment
# variables:
#  NZBPP_DIRECTORY    - path to destination dir for downloaded files;
#  NZBPP_NZBNAME      - user-friendly name of processed nzb-file as it is displayed
#                       by the program. The file path and extension are removed.
#                       If download was renamed, this parameter reflects the new name;
#  NZBPP_NZBFILENAME  - name of processed nzb-file. It includes file extension and also
#                       may include full path;
#  NZBPP_FINALDIR     - final destination path if set by one of previous pp-scripts;
#  NZBPP_CATEGORY     - category assigned to nzb-file (can be empty string);
#  NZBPP_DUPEKEY      - duplicate key of nzb-file;
#  NZBPP_DUPESCORE    - duplicate score of nzb-file;
#  NZBPP_DUPEMODE     - duplicate mode of nzb-file: SCORE, ALL, FORCE;
#  NZBPP_TOTALSTATUS  - total status of nzb-file:
#                       SUCCESS - everything OK;
#                       WARNING - download is damaged but probably can
#                                 be repaired; user intervention is
#                                 required;
#                       FAILURE - download has failed or a serious error
#                                 occurred during post-processing (unpack, par);
#                       DELETED - download was deleted; post-processing
#                                 scripts are usually not called in this case;
#                                 however it's possible to force calling
#                                 scripts with command "post-process again";
#  NZBPP_STATUS       - complete status info for nzb-file: it consists
#                       of total status and status detail separated with
#                       slash, for example: "FAILURE/UNPACK"; for possible
#                       status details see documentation on web site;
#  NZBPP_SCRIPTSTATUS - summary status of the scripts executed before the
#                       current one:
#                       NONE - no other scripts were executed yet or all
#                              of them have ended with exit code "NONE";
#                       SUCCESS - all other scripts have ended with exit
#                                 code "SUCCESS" ;
#                       FAILURE - at least one of the script has failed;
#  NZBPP_HEALTH       - download health: an integer value in the range
#                       from 0 (all articles failed) to 1000 (all articles
#                       successfully downloaded);
#  NZBPP_CRITICALHEALTH - critical health for this nzb-file: an integer
#                       value in the range 0-1000. The critical health
#                       is calculated based on number and size of
#                       par-files. If nzb-file doesn't have any par-files
#                       the critical health is 1000 (100.0%). If a half
#                       of nzb-file were par-files its critical health
#                       would be 0. If NZBPP_HEALTH goes down below
#                       NZBPP_CRITICALHEALTH the download becomes unrepairable;
#  NZBPP_TOTALARTICLES - number of articles in nzb-file;
#  NZBPP_SUCCESSARTICLES - number of successfully downloaded articles;
#  NZBPP_FAILEDARTICLES - number of failed articles;
#  NZBPP_SERVERX_SUCCESSARTICLES - number of successfully downloaded
#                       articles from ServerX (X is replaced with server
#                       number, for example NZBPP_SERVER1_SUCCESSARTICLES);
#  NZBPP_SERVERX_FAILEDARTICLES - number of failed articles from ServerX.
#
# If the script defines own options they are also passed as environment
# variables. These variables have prefix "NZBPO_" in their names. For
# example, option "myoption" will be passed as environment variable
# "NZBPO_myoption" and in addition in uppercase as "NZBPO_MYOPTION".
#
# If the script defines own post-processing parameters, they are also passed as
# environment variables. These variables have prefix "NZBPR_" in their
# names. For example, pp-parameter "myparam" will be passed as environment
# variable "NZBPR_myparam" and in addition in uppercase as "NZBPR_MYPARAM".
#
# In addition to arguments, pp-options and pp-parameters NZBGet passes all
# nzbget.conf-options to pp-script as environment variables. These
# variables have prefix "NZBOP_" and are written in UPPER CASE. For Example
# option "ParRepair" is passed as environment variable "NZBOP_PARREPAIR". The
# dots in option names are replaced with underscores, for example
# "SERVER1_HOST". For options with predefined possible values (yes/no, etc.)
# the values are passed always in lower case.
#
# If the script moves files it can inform the program about new location
# by printing special message into standard output (which is processed
# by NZBGet):
#   echo "[NZB] DIRECTORY=/path/to/moved/files";
# or:
#   echo "[NZB] FINALDIR=/path/to/moved/files";
#
# Command "DIRECTORY" changes the destiantion path of the download and
# affects the scripts executed after the current script as well as the
# program code itself, for example the command "Post-process again"
# will work on new location. Command "FINALDIR" just sets a separate
# property of the download and should be used when the files are moved
# into an existing directory containg other files to avoid the processing
# of those files by other scripts.
#
# To assign post-processing parameters:
#   echo "[NZB] NZBPR_myvar=my value";
#
# The prefix "NZBPR_" will be removed. In this example a post-processing
# parameter with name "myvar" and value "my value" will be associated
# with nzb-file.
#
# To inform NZBGet about bad download:
#   echo "[NZB] MARK=BAD";
#
# Return value: NZBGet processes the exit code returned by the script:
#  93 - post-process successful (status = SUCCESS);
#  94 - post-process failed (status = FAILURE);
#  95 - post-process skipped (status = NONE). Use this code when you script
#       terminates immediateley without doing any job and when this is not
#       a failure termination;
#  92 - request NZBGet to do par-check/repair for current nzb-file.
#
# All other return codes are interpreted as failure (status = FAILURE).
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
PostScript=

# List of scan scripts to execute before a nzb-file is added to queue.
#
# The scripts in the list must be separated with commas or semicolons. Only
# filenames without path must be used. All scripts must be stored in directory
# pointed by option <ScriptDir>.
#
# The scripts are executed each time a new file is found in incoming
# directory (option <NzbDir>) or a file is received via RPC (web-interface,
# command "nzbget --append", etc.).
#
# Example: UnzipNzb.sh, ScanNotify.py.
#
# The scripts can unpack archives which were put in incoming directory, make
# filename cleanup, change nzb-name, category, priority and post-processing
# parameters of the nzb-file or do other things.
#
# INFO FOR DEVELOPERS:
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#
# NZBGet passes following arguments to the script as environment
# variables:
#  NZBNP_DIRECTORY - path to directory, where file is located. It is a directory
#                    specified by the option <NzbDir> or a subdirectory;
#  NZBNP_FILENAME  - name of file to be processed;
#  NZBNP_NZBNAME   - nzb-name (without path but with extension);
#  NZBNP_CATEGORY  - category of nzb-file;
#  NZBNP_PRIORITY  - priority of nzb-file;
#  NZBNP_TOP  	   - flag indicating that the file will be added to the top
#                    of queue: 0 or 1;
#  NZBNP_PAUSED	   - flag indicating that the file will be added as
#                    paused: 0 or 1;
#  NZBNP_DUPEKEY   - duplicate key of nzb-file;
#  NZBNP_DUPESCORE - duplicate score of nzb-file;
#  NZBNP_DUPEMODE  - duplicate mode of nzb-file: SCORE, ALL, FORCE.
#
# In addition to these arguments NZBGet passes all nzbget.conf-options
# as environment variables. These variables have prefix "NZBOP_" and
# are written in UPPER CASE. For Example option "ParRepair" is passed as
# environment variable "NZBOP_PARREPAIR". The dots in option names are
# replaced with underscores, for example "SERVER1_HOST". For options
# with predefined possible values (yes/no, etc.) the values are passed
# always in lower case.
#
# The script can change nzb-name, category, priority,
# post-processing parameters and top-/paused-flags of the nzb-file
# by printing special messages into standard output (which is processed
# by NZBGet).
#
# To change nzb-name use following syntax:
#   echo "[NZB] NZBNAME=my download";
#
# To change category:
#   echo "[NZB] CATEGORY=my category";
#
# To change priority:
#   echo "[NZB] PRIORITY=signed_integer_value";
#
# for example: to set priority higher than normal:
#   echo "[NZB] PRIORITY=50";
#
# another example: use a negative value for "lower than normal" priority:
#   echo "[NZB] PRIORITY=-100";
#
# Although priority can be any integer value, the web-interface operates
# with six predefined priorities:
# -100 - very low priority;
# -50  - low priority;
# 0    - normal priority (default);
# 50   - high priority;
# 100  - very high priority;
# 900  - force priority.
#
# Downloads with priorities equal to or greater than 900 are downloaded and
# post-processed even if the program is in paused state (force mode).
#
# To assign post-processing parameters:
#   echo "[NZB] NZBPR_myvar=my value";
#
# The prefix "NZBPR_" will be removed. In this example a post-processing
# parameter with name "myvar" and value "my value" will be associated
# with nzb-file.
#
# To change top-flag (nzb-file will be added to the top of queue):
#   echo "[NZB] TOP=1";
#
# To change paused-flag (nzb-file will be added in paused state):
#   echo "[NZB] PAUSED=1";
#
# To change duplicate key:
#   echo "[NZB] DUPEKEY=tv show s01e02";
#
# To change duplicate score:
#   echo "[NZB] DUPESCORE=integer_value";
#
# To change duplicate mode:
#   echo "[NZB] DUPEMODE=(SCORE|ALL|FORCE)";
#
# The script can delete processed file, rename it or move somewhere.
# After the calling of the script the file will be either added to queue
# (if it was an nzb-file) or renamed by adding the extension ".processed".
#
# NOTE: Files with extensions ".processed", ".queued" and ".error" are skipped
# during the directory scanning.
#
# NOTE: Files with extension ".nzb_processed" are not passed to
# scan-script before adding to queue. This feature allows scan-script
# to prevent the scanning of nzb-files extracted from archives, if
# they were already processed by the script.
#
# NOTE: Files added via RPC calls in particular from web-interface are
# saved into incoming nzb-directory and then processed by the script.
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
ScanScript=

# List of queue scripts to execute on queue events.
#
# The scripts in the list must be separated with commas or semicolons. Only
# filenames without path must be used. All scripts must be stored in directory
# pointed by option <ScriptDir>.
#
# The scripts are executed on certain queue events such as adding
# a new nzb-file to queue, etc.
#
# Example: DeleteQueueSamples.sh, NzbAddedNotify.py.
#
# The script can modify the files in download queue (for example
# delete or pause all nfo, sfv, sample files) or do something else.
#
# INFO FOR DEVELOPERS:
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#
# NZBGet passes following arguments to the queue script as environment
# variables:
#  NZBNA_NZBNAME   - name of nzb-group. This name can be used in calls
#                    to nzbget edit-command using subswitch "-GN name";
#  NZBNA_FILENAME  - filename of the nzb-file. If the file was added
#                    from nzb-directory this is the fullname with path.
#                    If the file was added via web-interface it contains
#                    only filename without path;
#  NZBNA_EVENT     - describes why the script was called:
#                    NZB_ADDED - after adding of nzb-file to queue;
#                    FILE_DOWNLOADED - after a file included in nzb is
#                    downloaded;
#                    NZB_DOWNLOADED - after all files in nzb are downloaded
#                    (before post-processing);
#                    NZB_DELETED - when nzb is deleted from queue (moved
#                    to history). See NZBNA_DELETESTATUS for details;
#                    URL_COMPLETED - after an URL download is completed
#                    and the downloaded file was not added to queue
#                    (not nzb-extension, download error, parse
#                    error). See NZBNA_URLSTATUS for details;
#                    In the future the list of supported events may be
#                    extended. To avoid conflicts with future NZBGet
#                    versions the script must exit if the parameter
#                    has a value unknown to the script.
#  NZBNA_DELETESTATUS - delete status info, NZBNA_EVENT=NZB_DELETED:
#                    MANUAL - deleted by user or via API call;
#                    HEALTH - deleted by health check;
#                    DUPE - moved to history by duplicate check, can be
#                    reused later if necessary;
#                    GOOD - moved to history by duplicate check because
#                    there is already a duplicate marked as good;
#                    BAD - marked as bad by user or by queue-script;
#                    COPY - already in queue or in history;
#                    SCAN - malformed nzb-file, cannot be parsed;
#  NZBNA_URLSTATUS - URL status info, when NZBNA_EVENT=URL_COMPLETED:
#                    FAILURE - fetch error (could not be downloaded);
#                    SCAN_SKIPPED - downloaded file doesn't have
#                    nzb-extension and was skipped;
#                    SCAN_FAILED - file format error;
#  NZBNA_CATEGORY  - category of nzb-file (if assigned);
#  NZBNA_NZBID     - id of the nzb-file. This ID can be used with
#                    calls to nzbget edit-command;
#  NZBNA_PRIORITY  - priority (default is 0);
#  NZBNA_DUPEKEY   - duplicate key of nzb-file;
#  NZBNA_DUPESCORE - duplicate score of nzb-file;
#  NZBNA_DUPEMODE  - duplicate mode of nzb-file: SCORE, ALL, FORCE.
#
# In addition to these arguments NZBGet passes all nzbget.conf-options
# to  the script as environment variables. These variables have prefix
# "NZBOP_" and are written in UPPER CASE. For Example option "ParRepair"
# is passed as environment variable "NZBOP_PARREPAIR". The dots in option
# names are replaced with underscores, for example "SERVER1_HOST". For
# options with predefined possible values (yes/no, etc.) the values are
# passed always in lower case.
#
# The script can printing special messages into standard output (which
# is processed by NZBGet).
#
# To assign post-processing parameters:
#   echo "[NZB] NZBPR_myvar=my value";
#
# The prefix "NZBPR_" will be removed. In this example a post-processing
# parameter with name "myvar" and value "my value" will be associated
# with nzb-file.
#
# To inform NZBGet about bad download:
#   echo "[NZB] MARK=BAD";
#
# Examples of what the script can do:
# 1) pausing nzb-file using file-id:
# "$NZBOP_APPBIN" -c "$NZBOP_CONFIGFILE" -E G P $NZBNA_NZBID;
# 2) setting category using nzb-name:
# "$NZBOP_APPBIN" -c "$NZBOP_CONFIGFILE" -E GN K "my cat" "$NZBNA_NZBNAME";
# 3) pausing files with extension "nzb":
# "$NZBOP_APPBIN" -c "$NZBOP_CONFIGFILE" -E FR P "$NZBNA_NZBNAME/.*\.nzb";
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
QueueScript=

# List of rss feed scripts to execute before a rss feed content is processed.
#
# The scripts in the list must be separated with commas or semicolons. Only
# filenames without path must be used. All scripts must be stored in directory
# pointed by option <ScriptDir>.
#
# If rss feed has option <FeedX.FeedScript> defined (if not empty)
# the scripts defined there override the global option <FeedScript>.
#
# The scripts are executed after rss feed is read from server and before it
# is processed by the feed parser. Once the feed is fetched it is saved
# to a temporary file and the feed scripts are executed. The scripts
# can modify the content of the temporary feed file. Then the file is
# read by the feed parser and processed.
#
# Example: Rss.sh, Filter.py.
#
# The feed content is usually filtered using option <FeedX.Filter>. If a
# required filtering cannot be achieved via built-in filter commands the
# more advanced processing of the feed can be made using feed scripts.
#
# INFO FOR DEVELOPERS:
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
#
# NZBGet passes following arguments to the script as environment
# variables:
#  NZBFP_FILENAME  - name of feed file to be processed;
#  NZBFP_FEEDID    - ID of the feed.
#
# In addition to these arguments NZBGet passes all nzbget.conf-options
# as environment variables. These variables have prefix "NZBOP_" and
# are written in UPPER CASE. For Example option "ParRepair" is passed as
# environment variable "NZBOP_PARREPAIR". The dots in option names are
# replaced with underscores, for example "SERVER1_HOST". For options
# with predefined possible values (yes/no, etc.) the values are passed
# always in lower case.
#
# NOTE: This is a short documentation, for more information visit
# http://nzbget.net/Extension_scripts.
FeedScript=

# Execution order for scripts.
#
# If you assign multiple scripts to one nzb-file, they are executed in the
# order defined by this option. Scripts not listed here are executed at
# the end in their alphabetical order.
#
# The scripts in the list must be separated with commas or semicolons. Only
# filenames without path must be used. All scripts must be stored in directory
# pointed by option <ScriptDir>.
#
# Example: Cleanup.sh, Move.sh.
ScriptOrder=

# Pause download queue during executing of postprocess-script (yes, no).
#
# Enable the option to give CPU more time for postprocess-script. That helps
# to speed up postprocess on slow CPUs with fast connection (e.g. NAS-devices).
#
# NOTE: See also options <ParPauseQueue> and <UnpackPauseQueue>.
ScriptPauseQueue=no

# Minimum interval between calls of queue-scripts (seconds).
#
# Queue-scripts are executed during download, after every file included in
# nzb-file is downloaded. If the files are small they may be downloaded
# very fast causing queue-scripts to be working all the time. Sometimes
# this may lead to a performance decrease on systems with slow CPUs.
#
# This option allows to reduce the number of calls of queue-scripts by
# skipping "file-downloaded"-events if the previous call of queue-scripts
# for the same download (nzb-file) were performed a short time ago
# (as defined by the option).
#
# Value "-1" disables executing of queue-scripts on
# "file-downloaded"-events. Scripts are still executed on events
# "nzb-added" and "nzb-downloaded".
#
# NOTE: This options affects only queue-scripts and only
# "file-downloaded"-events. Queue-scripts can be activated using
# option <QueueScript> (for pure queue-scripts) or option <PostScript>
# (for dual-mode scripts which act as queue- and post-processing-scripts
# at the same time).
EventInterval=0
Server2.Active=yes
Server2.Name=astraweb - block
Server2.Level=1
Server2.Group=0
Server2.Host=ssl.astraweb.com
Server2.Port=443
Server2.Username=baberthal1
Server2.Password=idj7ymKVaT5E
Server2.JoinGroup=no
Server2.Encryption=yes
Server2.Cipher=
Server2.Connections=50
Server2.Retention=0
Category2.DestDir=
Category2.Unpack=yes
Category2.PostScript=
Category2.Aliases=
Category3.DestDir=
Category3.Unpack=yes
Category3.PostScript=
Category3.Aliases=
Category4.DestDir=
Category4.Unpack=yes
Category4.PostScript=
Category4.Aliases=
